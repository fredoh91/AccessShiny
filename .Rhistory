View(Babibs_TbSignal)
View(produits2)
View(Babibs_Produits)
runApp('AccessShiny_2')
View(Babibs_Produits)
runApp('AccessShiny_2')
View(Babibs_Produits)
runApp('AccessShiny_2')
View(Babibs_TbBiblio)
runApp('AccessShiny_2')
runApp('AccessShiny_2')
View(Babibs_Produits)
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
#test<-dplyr::union()
# mutate(CM_CasMarquant,TypeSignal="CM")
test <- Babibs_Produits %>% inner_join(Babibs_TbSignal, Babibs_TbBiblio, by = "IdSignal") %>% filter (Babibs_Produits$denomination %in% c("ADALIMUMAB ((MAMMIFERE/HAMSTER/CHO))","ADALIMUMAB"))
test <- Babibs_Produits %>% inner_join(Babibs_TbSignal, Babibs_TbBiblio, by = "IdSignal")
View(test)
rm(test)
View(Babibs_Produits)
test <-  select(Babibs_Produits,denomination,DCI,IdSignal)
View(test)
test <-  select(Babibs_Produits,denomination,DCI,IdSignal) %>% inner_join(select(Babibs_TbSignal,IdSignal,IdBiblio), by = "IdSignal")
View(Babibs_TbSignal)
test <-  select(Babibs_Produits,denomination,DCI,IdSignal) %>% inner_join(select(Babibs_TbSignal,IdSignal,NumSignal), by = "IdSignal")
View(test)
View(Babibs_TbBiblio)
test <-  select(Babibs_Produits,denomination,DCI,IdSignal) %>% inner_join(select(Babibs_TbSignal,IdSignal,NumSignal), by = "IdSignal") %>% inner_join(select(Babibs_TbBiblio,IdBiblio), by = "IdSignal")
test <-  select(Babibs_Produits,denomination,DCI,IdSignal) %>% inner_join(select(Babibs_TbSignal,IdSignal,NumSignal), by = "IdSignal") %>% inner_join(select(Babibs_TbBiblio,IdSignal,IdBiblio), by = "IdSignal")
View(test)
rm(test)
test <- select(Babibs_Produits,denomination,DCI,IdSignal) %>% inner_join(select(Babibs_TbSignal,IdSignal,NumSignal), by = "IdSignal") %>% inner_join(select(Babibs_TbBiblio,IdSignal,IdBiblio), by = "IdSignal") %>% filter (Babibs_Produits$denomination %in% c("ADALIMUMAB ((MAMMIFERE/HAMSTER/CHO))","ADALIMUMAB"))
test <- select(Babibs_Produits,denomination,DCI,IdSignal) %>% inner_join(select(Babibs_TbSignal,IdSignal,NumSignal), by = "IdSignal") %>% inner_join(select(Babibs_TbBiblio,IdSignal,IdBiblio), by = "IdSignal") %>% filter (denomination %in% c("ADALIMUMAB ((MAMMIFERE/HAMSTER/CHO))","ADALIMUMAB"))
View(test)
test <- select(Babibs_Produits,denomination,DCI,IdSignal) %>% inner_join(select(Babibs_TbSignal,IdSignal,NumSignal), by = "IdSignal") %>% inner_join(select(Babibs_TbBiblio,IdSignal,IdBiblio), by = "IdSignal") %>% mutate(TypeSignal="Biblio") %>% filter (denomination %in% c("ADALIMUMAB ((MAMMIFERE/HAMSTER/CHO))","ADALIMUMAB"))
View(test)
rm(test)
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
test <- select(Babibs_Produits,denomination,DCI,IdSignal) %>% inner_join(select(Babibs_TbSignal,IdSignal,NumSignal), by = "IdSignal") %>% inner_join(select(Babibs_TbBiblio,IdSignal,IdBiblio), by = "IdSignal") %>% mutate(TypeSignal="Biblio") %>% rename("NumSignal","NumCRPV/NumSignal") %>%  filter (denomination %in% c("ADALIMUMAB ((MAMMIFERE/HAMSTER/CHO))","ADALIMUMAB"))
test <- select(Babibs_Produits,denomination,DCI,IdSignal) %>% inner_join(select(Babibs_TbSignal,IdSignal,NumSignal), by = "IdSignal") %>% inner_join(select(Babibs_TbBiblio,IdSignal,IdBiblio), by = "IdSignal") %>% mutate(TypeSignal="Biblio") %>% rename("NumCRPV/NumSignal" = "NumSignal") %>%  filter (denomination %in% c("ADALIMUMAB ((MAMMIFERE/HAMSTER/CHO))","ADALIMUMAB"))
View(test)
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
View(CM_Produits)
View(CM_CasMarquant)
runApp('AccessShiny_2')
runApp('AccessShiny_2')
View(CM_CasMarquant)
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp()
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
shiny::runApp('AccessShiny_2')
test <- select(CM_Produits,denomination,DCI,idCas) %>%
inner_join(select(CM_CasMarquant,idCas,numeroCRPV), by = "idCas") %>%
mutate(TypeSignal="CM") %>%
rename("NumCRPV/NumSignal" = "numeroCRPV","Id" = "idCas") %>%
filter (denomination %in% c("ABILIFY","ABILIFY 1 mg/ml, solution buvable"))
View(test)
runApp('AccessShiny_2')
test <-       select(Babibs_Produits,denomination,DCI,IdSignal) %>%
inner_join(select(Babibs_TbSignal,IdSignal,NumSignal), by = "IdSignal") %>%
inner_join(select(Babibs_TbBiblio,IdSignal), by = "IdSignal") %>%
mutate(TypeSignal="Biblio") %>%
rename("NumCRPV/NumSignal" = "NumSignal","Id" = "IdSignal") %>%
filter (denomination %in% c("ADALIMUMAB","ADALIMUMAB ((MAMMIFERE/HAMSTER/CHO))"))
View(test)
test <- select(CM_Produits,denomination,DCI,idCas) %>%
inner_join(select(CM_CasMarquant,idCas,numeroCRPV), by = "idCas") %>%
mutate(TypeSignal="CM") %>%
rename("NumCRPV/NumSignal" = "numeroCRPV","Id" = "idCas") %>%
filter (denomination %in% c("ABILIFY","ABILIFY 1 mg/ml, solution buvable"))
test <- union_all (select(CM_Produits,denomination,DCI,idCas) %>%
inner_join(select(CM_CasMarquant,idCas,numeroCRPV), by = "idCas") %>%
mutate(TypeSignal="CM") %>%
rename("NumCRPV/NumSignal" = "numeroCRPV","Id" = "idCas") %>%
filter (denomination %in% c("ABILIFY","ABILIFY 1 mg/ml, solution buvable")),
select(Babibs_Produits,denomination,DCI,IdSignal) %>%
inner_join(select(Babibs_TbSignal,IdSignal,NumSignal), by = "IdSignal") %>%
inner_join(select(Babibs_TbBiblio,IdSignal), by = "IdSignal") %>%
mutate(TypeSignal="Biblio") %>%
rename("NumCRPV/NumSignal" = "NumSignal","Id" = "IdSignal") %>%
filter (denomination %in% c("ADALIMUMAB","ADALIMUMAB ((MAMMIFERE/HAMSTER/CHO))")))
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
table(test)
length(test)
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
shiny::runApp('AccessShiny_2')
runApp('AccessShiny_2')
shiny::runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
shiny::runApp('AccessShiny_2')
View(sProduit)
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp()
runApp('AccessShiny_2')
runApp('AccessShiny_2')
View(CM_tempo)
View(Biblio_tempo)
View(CM_Biblio)
View(CM_Biblio)
runApp('AccessShiny_2')
View(CM_Biblio)
View(CM_Biblio)
View(CM_Biblio)
shiny::runApp('AccessShiny_2')
detach("package:data.table", unload = TRUE)
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
View(CM_CasMarquant)
View(Babibs_Produits)
View(Babibs_TbMesusage)
runApp('AccessShiny_2')
shiny::runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
rm(test)
shiny::runApp('AccessShiny_2')
remove.packages("Rpgs", lib="~/R/R-4.1.1/library")
install.packages("S:/SUSAR/SHINY/reporting/0-package/Rpgs_0.1.9.tar.gz", repos = NULL, type = "source")
remove.packages("Rpgs", lib="~/R/R-4.1.1/library")
install.packages("S:/SUSAR/SHINY/reporting/0-package/Rpgs_0.1.9.tar.gz", repos = NULL, type = "source")
View(Babibs_Historique)
View(Babibs_Historique)
View(Babibs_Produits)
View(Babibs_TbBiblio)
View(Babibs_Produits)
View(Babibs_TbMesuresBiblioMes)
View(Babibs_TbMesuresBiblioMes_labo)
View(Babibs_TbMesusage)
View(Babibs_TbSignal)
View(CM_CasMarquant)
View(CM_Historique)
View(CM_IntervenantCM)
View(CM_Produits)
View(CM_TbMesuresCalendrier)
View(Babibs_Historique)
shiny::runApp('AccessShiny_2')
shiny::runApp('AccessShiny_2')
shiny::runApp('G:/DM-DSSE/EURINTER/_PROD/MAP_PROD')
shiny::runApp('AccessShiny_2')
install.packages("RMariaDB")
install.packages(c("backports", "broom", "cli", "cpp11", "crayon", "crosstalk", "digest", "DT", "dtplyr", "flextable", "fs", "future", "glue", "keyring", "lmtest", "Matrix", "officer", "parallelly", "RcppArmadillo", "readr", "rlang", "rsample", "slam", "sp", "stringi", "tibble", "timetk", "tinytex", "tseries", "tsibble", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2"))
drv<- RJDBC::JDBC("org.mariadb.jdbc.Driver",
classPath = system.file("java/mariadb-java-client-2.7.0.jar"
,package="Rpgs")
source("~/.active-rstudio-document")
drv<- RJDBC::JDBC("org.mariadb.jdbc.Driver",
classPath = system.file("java/mariadb-java-client-2.7.0.jar"
,package="Rpgs")
)
con <- RJDBC::dbConnect(drv, "jdbc:mariadb://127.0.0.1:3306/access_shiny",
"root", "root"  )
dbListTables(con)
library(DBI)
dbListTables(con)
library(RJDBC)
library(DBI)
drv<- RJDBC::JDBC("org.mariadb.jdbc.Driver",
classPath = system.file("java/mariadb-java-client-2.7.0.jar"
,package="Rpgs")
)
con <- RJDBC::dbConnect(drv, "jdbc:mariadb://127.0.0.1:3306/access_shiny",
"root", "root"  )
dbListTables(con)
drv<- RJDBC::JDBC("org.mariadb.jdbc.Driver",
classPath = system.file("java/mariadb-java-client-2.7.0.jar"
,package="Rpgs")
)
con <- RJDBC::dbConnect(drv, "jdbc:mariadb://127.0.0.1:3306/access_shiny",
"root", "root"  )
con <- RJDBC::dbConnect(drv, "jdbc:mariadb://127.0.0.1:3306/access_shiny",
"root", "root"  )
(con)
View(con)
con <- dbConnect(RMariaDB::MariaDB(), host = "127.0.0.1", dbname = "access_shiny",
user = "root", password = "root")
View(con)
con
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/TestRMARIADB.R")
dbListTables(con)
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/TestRMARIADB.R", echo=TRUE)
rm(con)
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/TestRMARIADB.R", echo=TRUE)
rm(con)
con
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/TestRMARIADB.R", echo=TRUE)
con
rm(con)
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/TestRMARIADB.R", echo=TRUE)
shiny::runApp('AccessShiny_2')
install.packages("pool")
library(pool)
pool <- dbPool(
drv = RMariaDB::MariaDB(),
dbname = "access_shiny",
host = "127.0.0.1",
username = "root",
password = "root"
)
dbListTables(pool)
shiny::runApp('AccessShiny_2')
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/TestRMARIADB.R", echo=TRUE)
shiny::runApp('AccessShiny_2')
runApp('AccessShiny_2')
shiny::runApp('AccessShiny_2')
runApp('AccessShiny_2')
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/TestRMARIADB.R", echo=TRUE)
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp()
runApp('AccessShiny_2')
save.image("D:/Users/Frannou/Dev/R/AccessShiny/AccessShiny_2/AccessShiny.RData")
shiny::runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
produits<-dbGetQuery(pool, "SELECT denomination,DCI FROM cm_produits UNION SELECT denomination,DCI FROM babibs_produits ORDER BY denomination")
produits<-dbGetQuery(pool, "SELECT denomination,DCI FROM cm_produits UNION SELECT denomination,DCI FROM babibs_produits") %>% arrange(denomination)
produits<-dbGetQuery(pool, "SELECT denomination,DCI FROM cm_produits UNION SELECT denomination,DCI FROM babibs_produits")
library(shiny)
library(DT)
library(dplyr)
library(data.table)
library(RJDBC)
library(DBI)
library(pool)
produits<-dbGetQuery(pool, "SELECT denomination,DCI FROM cm_produits UNION SELECT denomination,DCI FROM babibs_produits")
pool <- dbPool(
drv = RMariaDB::MariaDB(),
dbname = "access_shiny",
host = "127.0.0.1",
username = "root",
password = "root"
)
produits<-dbGetQuery(pool, "SELECT denomination,DCI FROM cm_produits UNION SELECT denomination,DCI FROM babibs_produits")
rm(produits)
produits<-dbGetQuery(pool, "SELECT denomination,DCI FROM cm_produits UNION SELECT denomination,DCI FROM babibs_produits ORDER BY denomination")
View(produits)
produits<-dbGetQuery(pool, "SELECT denomination,DCI FROM cm_produits UNION SELECT denomination,DCI FROM babibs_produits ORDER BY denomination,DCI")
produitsDCI<-dbGetQuery(pool, "SELECT DCI FROM cm_produits UNION SELECT DCI FROM babibs_produits ORDER BY DCI")
runApp('AccessShiny_2')
test<-dbGetQuery(pool, "SELECT denomination,DCI,idCas, TypeSignal='CM' FROM cm_produits INNER JOIN idCas,numeroCRPV FROM cm_casmarquant ON cm_produits.idCas = cm_casmarquant.idCas")
pool <- dbPool(
drv = RMariaDB::MariaDB(),
dbname = "access_shiny",
host = "127.0.0.1",
username = "root",
password = "root"
)
test<-dbGetQuery(pool, "SELECT denomination,DCI,idCas, TypeSignal='CM' FROM cm_produits INNER JOIN idCas,numeroCRPV FROM cm_casmarquant ON cm_produits.idCas = cm_casmarquant.idCas")
test<-dbGetQuery(pool, "SELECT cm_produits.denomination,cm_produits.DCI,cm_produits.idCas,cm_produits.numeroCRPV,TypeSignal='CM' FROM cm_produits INNER JOIN cm_casmarquant ON cm_produits.idCas = cm_casmarquant.idCas")
test<-dbGetQuery(pool, "SELECT cm_produits.denomination,cm_produits.DCI,cm_produits.idCas,cm_casmarquant.numeroCRPV,TypeSignal='CM' FROM cm_produits INNER JOIN cm_casmarquant ON cm_produits.idCas = cm_casmarquant.idCas")
test<-dbGetQuery(pool, "SELECT cm_produits.denomination,cm_produits.DCI,cm_produits.idCas,cm_casmarquant.numeroCRPV,'CM' AS TypeSignal FROM cm_produits INNER JOIN cm_casmarquant ON cm_produits.idCas = cm_casmarquant.idCas")
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
shiny::runApp('AccessShiny_2')
View(pool)
pool %>% tbl(cm_produits)  %>% collect()
runApp('AccessShiny_2')
pool %>% tbl(cm_produits)  %>% collect()
pool %>% tbl("cm_produits)  %>% collect()
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
View(produits)
runApp('AccessShiny_2')
runApp('AccessShiny_2')
View(produits)
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp()
runApp('AccessShiny_2')
runApp()
runApp('AccessShiny_2')
shiny::runApp('AccessShiny_2')
shiny::runApp('AccessShiny_2')
shiny::runApp('AccessShiny_2')
View(produitsDCI)
runApp('AccessShiny_2')
View(produitsDCI)
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
View(produitsDCI)
View(produitsDCI)
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
shiny::runApp('AccessShiny_2')
shiny::runApp('AccessShiny_2')
runApp('AccessShiny_2')
git checkout -b "ActMes"
git checkout -b ActMes
git checkout b "ActMes"
git checkout -b "ActMes""
shiny::runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
View(produitsDCI)
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/TestRMARIADB.R", echo=TRUE)
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/TestRMARIADB.R", encoding = 'UTF-8', echo=TRUE)
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/TestRMARIADB.R", encoding = 'UTF-8', echo=TRUE)
View(test)
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
View(testActMes)
runApp('AccessShiny_2')
runApp()
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp()
runApp('AccessShiny_2')
shiny::runApp('AccessShiny_2')
runApp()
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp()
runApp('AccessShiny_2')
testActMes$Nb
plot (testActMes)
plot (testActMes$Nb)
testActMes$`Année/Semaine`
plot(testActMes$`Année/Semaine`)
ggplot(testActMes)
ggplot2::ggplot(testActMes)
ggplot2::ggplot(testActMes$Nb)
ggplot2::ggplot(as.data.frame(testActMes$Nb))
str(testActMes)
ggplot2::ggplot(testActMes,Nb)
ggplot2::ggplot(testActMes,(Nb))
ggplot2::ggplot(testActMes,("Nb"))
ggplot2::ggplot(testActMes,aes(Nb))
ggplot2::ggplot(testActMes,ggplot2::aes(Nb))
test<-dbGetQuery(pool, "SELECT COUNT(*) AS 'Nb', DATE_FORMAT(datePrevision,'%Y/S%u') AS 'AnneeSemaine' FROM cm_tbmesurescalendrier
WHERE cm_tbmesurescalendrier.dateMiseOeuvre IS NULL AND cm_tbmesurescalendrier.datePrevision IS NOT NULL
GROUP BY DATE_FORMAT(cm_tbmesurescalendrier.datePrevision,'%Y/S%u')
ORDER BY DATE_FORMAT(cm_tbmesurescalendrier.datePrevision,'%Y/S%u')"
View(testActMes)
View(testActMes)
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/TestRMARIADB.R", echo=TRUE)
View(testActMes)
View(test)
runApp('AccessShiny_2')
View(testActMes)
ggplot2::ggplot(testActMes,ggplot2::aes(Nb,AnneeSemaine))
plot(testActMes$Nb,testActMes$AnneeSemaine)
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/Testggplot2.R", echo=TRUE)
View(testActMes)
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/Testggplot2.R", echo=TRUE)
View(testActMes)
head(testActMes)
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/Testggplot2.R", echo=TRUE)
num<-as.dta.frame(c(1,2,3,4,5))
num<-as.data.frame(c(1,2,3,4,5))
View(num)
num<-as.data.frame((1,2,3,4,5))
View(num)
rm(num)
num<-as.data.frame(c(1,2,3,4,5))
View(num)
num<-as.data.frame(c(1,2,3,4,5))
rm(num)
t<-c(1,2,3,4,5)
num<-as.data.frame(t)
View(num)
Nb<-c(1,2,3,4,5)
num<-as.data.frame(Nb)
View(num)
rm(t,Nb)
#   geom_histogram(color="black", fill="white")
ggplot(num, aes(x=Nb)) +
geom_histogram(color="black", fill="white")
Nb<-testActMes$Nb
num<-as.data.frame(Nb)
# ggplot(testActMes, aes(x=Nb)) +
#   geom_histogram(color="black", fill="white")
ggplot(num, aes(x=Nb)) +
geom_histogram(color="black", fill="white")
#   geom_histogram(color="black", fill="white")
ggplot(num, aes(x=Nb)) +
geom_histogram(color="black", fill="white")
ggplot2.histogram(data=testActMes$Nb, xName='Nb')
qplot(testActMes, data = Nb, geom = "histogram")
library(ggplot2)
qplot(testActMes, data = Nb, geom = "histogram")
ggplot2.histogram(data=testActMes$Nb, xName='Nb')
# ggplot(testActMes, aes(x=Nb)) +
#   geom_histogram(color="black", fill="white")
ggplot(num, aes(x=Nb)) +
geom_histogram(color="black", fill="white")
View(testActMes)
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/Testggplot2.R", echo=TRUE)
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/Testggplot2.R", echo=TRUE)
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/Testggplot2.R", echo=TRUE)
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/Testggplot2.R", echo=TRUE)
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/Testggplot2.R", echo=TRUE)
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/Testggplot2.R", echo=TRUE)
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/Testggplot2.R", echo=TRUE)
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/TestRMARIADB.R", encoding = 'UTF-8', echo=TRUE)
View(testActMes2)
#
# num<-as.data.frame(Nb)
# # ggplot(testActMes, aes(x=Nb)) +
# #   geom_histogram(color="black", fill="white")
# ggplot(num, aes(x=Nb)) +
#   geom_histogram(color="black", fill="white")
#
#
# qplot(testActMes, data = Nb, geom = "histogram")
# ggplot(donnees, aes(x = cnt)) + geom_histogram()
str(testActMes2)
testActMes2<-dbGetQuery(pool, "SELECT idMesure, DATE_FORMAT(datePrevision,'%Y/S%u') AS 'AnneeSemaine' FROM cm_tbmesurescalendrier
WHERE dateMiseOeuvre IS NULL AND datePrevision IS NOT NULL
ORDER BY DATE_FORMAT(datePrevision,'%Y/S%u')"
)
#
# num<-as.data.frame(Nb)
# # ggplot(testActMes, aes(x=Nb)) +
# #   geom_histogram(color="black", fill="white")
# ggplot(num, aes(x=Nb)) +
#   geom_histogram(color="black", fill="white")
#
#
# qplot(testActMes, data = Nb, geom = "histogram")
# ggplot(donnees, aes(x = cnt)) + geom_histogram()
str(testActMes2)
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/Testggplot2.R", echo=TRUE)
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/Testggplot2.R", echo=TRUE)
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/Testggplot2.R", echo=TRUE)
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/Testggplot2.R", echo=TRUE)
View(testActMes2)
testActMes3<-dbGetQuery(pool, "SELECT idMesure, datePrevision FROM cm_tbmesurescalendrier
WHERE dateMiseOeuvre IS NULL AND datePrevision IS NOT NULL
ORDER BY datePrevision"
)
View(testActMes3)
testActMes3<-dbGetQuery(pool, "SELECT idMesure, DATE(datePrevision) AS 'datePrev' FROM cm_tbmesurescalendrier
WHERE dateMiseOeuvre IS NULL AND datePrevision IS NOT NULL
ORDER BY datePrevision"
)
View(testActMes3)
#
# num<-as.data.frame(Nb)
# # ggplot(testActMes, aes(x=Nb)) +
# #   geom_histogram(color="black", fill="white")
# ggplot(num, aes(x=Nb)) +
#   geom_histogram(color="black", fill="white")
#
#
# qplot(testActMes, data = Nb, geom = "histogram")
# ggplot(donnees, aes(x = cnt)) + geom_histogram()
str(testActMes3)
graph <- ggplot(data = testActMes3, mapping = aes(x=DatePrev)) + geom_histogram()
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/Testggplot2.R", echo=TRUE)
source("D:/Users/Frannou/Dev/R/AccessShiny/Tests/Testggplot2.R", echo=TRUE)
rm(testActMes)
rm(testActMes2)
rm(testActMes3)
View(test)
View(graph, mon_graph)
rm(graph, mon_graph)
rm(num)
rm(test)
rm(Nb)
shiny::runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
runApp('AccessShiny_2')
shiny::runApp('AccessShiny_2')
